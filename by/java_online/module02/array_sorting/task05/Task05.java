/*
 * Сортировка вставками. Дана последовательность чисел
 * a1, a2, ..., an. Требуется переставить числа в порядке возрастания.
 * Делается это следующим образом. Пусть a1, a2, ..., ai -
 * упорядоченная последовательность, т. е. a1 <= a2 <= ... <= an.
 * Берется следующее число ai + 1 и вставляется в последовательность так,
 * чтобы новая последовательность была тоже возрастающей.
 * Процесс производится до тех пор, пока все элементы от i + 1 до n
 * не будут перебраны. Примечание. Место помещения очередного элемента
 * в отсортированную часть производить с помощью двоичного поиска.
 * Двоичный поиск оформить в виде отдельной функции.
 */

package by.java_online.module02.array_sorting.task05;

public class Task05 {
    public static void main(String[] args) {
        int[] array = {-18, -19, -15, 3, -31, 8, -7, 0, -20, 4};

        /*
         * В качестве упорядоченной последовательности мы принимаем первый
         * элемент массива с индексом 0. Далее для каждого следующего
         * элемента мы будем искать индекс, на котором должен находиться
         * элемент, чтобы вся последовательность стала упорядоченной.
         */

        int i = 1;
        while (i < array.length) {
            int current = array[i];  // элемент, место которого мы ищем
            int index = 0;  // индекс, на котором должен находиться элемент

            /*
             * Чтобы определить индекс элемента, мы будем искать в
             * отсортированной части число, которое меньше нашего элемента,
             * но самое близкое к нему по значению. Затем к его индексу
             * прибавим единицу.
             * Если у нас есть последовательносать - 1, 4, 9, 11
             * и мы ищем место для числа 7, то мы узнаем индекс числа 4 и
             * к нему прибавим единицу, т.е. получим, что у 7 индекс должен
             * быть равен 3.
             */

            if (current <= array[i - 1]) {
                for (int element = current - 1; element >= array[0]; element--) {
                    index = binarySearch(array, element, i);

                    if (index != -1) {
                        break;
                    }
                }

                /*
                 * После того, как мы индекс определен, ставим наш элемент
                 * на положенное место, а все элементы перед ним сдвигаются
                 * вперед на один шаг.
                 */

                int j = i - 1;

                while (j >= index) {
                    array[j + 1] = array[j];
                    j--;
                }
                array[j + 1] = current;
            }
            i++;
        }

        for (int l = 0; l < array.length; l++) {
            System.out.print(array[l] + " ");
        }
    }

    private static int binarySearch(int[] array, int element , int i) {

        /*
         * Метод возвращает либо индекс числа,
         * либо -1, если такое число не найдено
         */

        int left = 0;
        int right = i;

        while (left <= right) {
            int middle;
            middle = left + (right - left) / 2;

            if (array[middle] == element) {
                return middle + 1;
            } else if (array[middle] > element) {
                right = middle - 1;
            } else if (array[middle] < element) {
                left = middle + 1;
            }
        }
        return -1;
    }
}